$media-breakpoints: (
  xs: 480px,
  sm: 640px,
  md: 800px,
  lg: 960px,
  xl: 1200px,
) !default;

@mixin border($color: red) {
  border: 2px solid $color;
}

@mixin push-auto {
  margin-left: auto;
  margin-right: auto;
}

@mixin text-size($size: 1rem, $value: 1.3) {
  font-size: $size;
  line-height: $value;
}

@mixin margin-sides($value: $margin-global) {
  margin-left: $value;
  margin-right: $value;
}

@mixin margin-ends($value: $margin-global) {
  margin-top: $value;
  margin-bottom: $value;
}

@mixin padding-sides($value: $margin-global) {
  padding-left: $value;
  padding-right: $value;
}

@mixin padding-ends($top: 0, $bottom: 0) {
  padding-top: $top;
  padding-bottom: $bottom;
}

@mixin flex-col($wrap: nowrap) {
  display: flex;
  flex-direction: column;
  flex-wrap: $wrap;
}

@mixin flex-row($wrap: nowrap) {
  display: flex;
  flex-direction: row;
  flex-wrap: $wrap;
}

@mixin justify-align($justify: space-between, $align: center) {
  justify-content: $justify;
  align-items: $align;
}

@mixin dimensions($height: 100%, $width: 100%) {
  height: $height;
  width: $width;
}

@mixin breakpoint-max($name, $breakpoints: $media-breakpoints) {
  @if map-has-key($breakpoints, $name) {
    $max: map-get($breakpoints, $name);
    @media (max-width: $max) {
      @content;
    }
  }
}

@mixin breakpoint-min($name, $breakpoints: $media-breakpoints) {
  @if map-has-key($breakpoints, $name) {
    $min: map-get($breakpoints, $name) + 1;
    @media (min-width: $min) {
      @content;
    }
  }
}

@mixin fontSmooth {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin hocus {
  &:hover,
  &:focus {
    @content;
  }
}

@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}

@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(0.12 0.16 0.19 0.25 0.3, $depth));

  @return 0 $primary-offset $blur $color;
}

@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(0.24 0.23 0.23 0.22 0.22, $depth));

  @return 0 $primary-offset $blur $color;
}

$base-font-size: 16px;

@function rem($px, $base: $base-font-size) {
  @return ($px / $base) * 1rem;
}
